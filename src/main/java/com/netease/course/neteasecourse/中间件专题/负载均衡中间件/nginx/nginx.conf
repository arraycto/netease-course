-------------------全局块--------------------
#user  nobody;  				#进程运行的用户和用户组，默认为nobody nobody
worker_processes  1; 			#允许生成的nginx工作进程数，默认为1，进程数越多，可支持的并发量越大，一般与cpu个数保持一致，并且worker_processes与CPU绑定

#error_log  logs/error.log error;	#错误日志路径，级别。这个设置可以放入全局块或者http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg

#pid        logs/nginx.pid;		#指定master进程ID的文件存放地址
-------------------全局块--------------------


-------------------事件块--------------------
events {
	user epoll					#选择事件模型，默认ngxin选择最合适的事件模型，epoll性能最高
	#accept_mutex on; 			#设置网路连接序列化，防止惊群现象发生，默认为on 
								#惊群现象：一个网路连接到来，多个睡眠的进程被同事叫醒，但只有一个进程能获得链接，这样会影响系统性能
	#multi_accept on;  			#设置一个进程是否同时接受多个网络连接，默认为off
    worker_connections  65535;	#工作进程最大连接数，默认为512
}
-------------------事件块--------------------


http {
    include       /path/file;					#引入配置文件
    default_type  application/octet-stream;		#默认文件类型，默认为text/plain

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '   #main的日志格式
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
	##$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址;$remote_user用来记录客户端用户名称;$time_local:用来记录访问时间与时区;$request:记录请求的url与http协议
    
	access_log  logs/access.log  main;			#main日志格式作为access.log日志格式
	#access_log off; 							#取消服务日志  
    sendfile        on;							#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块
	#sendfile_max_chunk 100k;  					#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限
    #tcp_nopush     on;
    keepalive_timeout  65;						#连接超时时间，默认为75s，可以在http，server，location块
    #gzip  on;
	#upstream mysvr {   						#用于配置Web服务负载均衡，名称mysvr
	#     ip_hash 								#定义nginx负载均衡策略ip_hash
	#	  server 127.0.0.1:8080 weight7;		#定义集群中的节点的ip和port,并可以定义nginx负载均衡策略 weight权重，权重越大优先分发请求
	#	  server 192.168.10.121:8081; 
	#}
	
    server {
        listen       80;						#nginx监听端口
        server_name  localhost;					#监听地址   

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

		#location ~*^.+$ {       				#location根据用户请求的uri来匹配定义的uri表达式，如果可以匹配，就选择当前location快来处理用户请求。正则匹配，~ 为区分大小写，~* 为不区分大小写，= 完全匹配，^~ 只需要匹配前半部分，/ 匹配所有uri 。
		
        #   root path;  						#根目录
        #   index index.html;  					#设置默认页
        #   proxy_pass  http://mysvr; 			#代理转发，请求转发到upstream定义的mysvr服务器列表
        #   deny 127.0.0.1;  					#拒绝的ip
        #   allow 172.18.5.54; 					#允许的ip           
        }
		
        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;	#错误页

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }     
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
